# 生产环境 Docker Compose 配置
# 包含完整的时区设置和优化配置

version: '3.8'

services:
  postgres:
    image: postgres:16.3
    container_name: flutter_web_admin_postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-flutter_web_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # 时区设置
      TZ: ${TIMEZONE:-Asia/Shanghai}
      PGTZ: ${TIMEZONE:-Asia/Shanghai}
      # PostgreSQL 优化设置
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-timezone.sql:/docker-entrypoint-initdb.d/01-init-timezone.sql
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c timezone=Asia/Shanghai
      -c log_timezone=Asia/Shanghai
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-flutter_web_admin}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:6.2.6-alpine
    container_name: flutter_web_admin_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    environment:
      TZ: ${TIMEZONE:-Asia/Shanghai}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flutter_web_admin_app
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      # 时区设置
      TZ: ${TIMEZONE:-Asia/Shanghai}
      APP_TIMEZONE: ${TIMEZONE:-Asia/Shanghai}
      # 数据库配置
      DB_HOST: postgres
      DB_NAME: ${POSTGRES_DB:-flutter_web_admin}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      # Redis 配置
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # 运行模式
      runmode: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: flutter_web_admin_nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    environment:
      TZ: ${TIMEZONE:-Asia/Shanghai}
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: flutter_web_admin_network
