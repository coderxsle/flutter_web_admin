---
description: 
globs: 
alwaysApply: true
---
# ContiNew Admin UI 代码规范

## 架构规范

- 前端框架：Vue 3 + TypeScript
- UI 框架：Arco Design Vue
- 状态管理：Pinia
- 路由管理：Vue Router
- 构建工具：Vite
- 样式处理：SCSS/LESS
- 代码规范：ESLint + Prettier

## 目录结构
```
src/
├── apis/         # API 接口定义
├── assets/       # 静态资源文件
├── components/   # 全局公共组件
├── config/       # 应用配置
├── constant/     # 常量定义
├── directives/   # 自定义指令
├── hooks/        # 自定义钩子函数
├── layout/       # 布局组件
├── mock/         # 模拟数据
├── router/       # 路由配置
├── stores/       # 状态管理
├── styles/       # 全局样式
├── types/        # 类型定义
├── utils/        # 工具函数
└── views/        # 页面组件
```

## 编码规范

### 命名规范

- 文件命名：
  - Vue 组件文件：使用 PascalCase 命名（如：`UserProfile.vue`）
  - 目录命名：使用 kebab-case 命名（如：`user-profile/`）
  - 工具类文件：使用 camelCase 命名（如：`formatDate.ts`）

- 变量命名：
  - 普通变量：使用 camelCase
  - 常量：使用 UPPER_SNAKE_CASE
  - 私有变量：以下划线开头，如 `_privateVar`

- 组件命名：
  - 组件名称：使用 PascalCase
  - Props: 使用 camelCase

### Vue 组件规范

- 组件结构顺序：
  1. `<script>` 部分
  2. `<template>` 部分
  3. `<style>` 部分

- 组件属性顺序：
  1. defineOptions
  2. defineModel
  3. defineProps
  4. defineEmits
  5. defineSlots
  6. defineExpose（最后）

- 事件命名：使用 kebab-case（如：`@page-change`）

### 样式规范

- 使用 scoped 样式
- 使用 SCSS/LESS 预处理器
- 颜色使用 CSS 变量，如 `var(--color-text-1)`
- 布局优先使用 flex 或 grid
- 响应式设计使用 Arco Design 的栅格系统

### 其他规范

- 使用 TypeScript 类型声明
- API 请求统一管理，使用 axios
- 配置信息统一管理，使用环境变量
- 路由懒加载优化性能
- 敏感信息加密处理
- 错误统一捕获并处理
- 注释应当清晰，解释"为什么"而不是"是什么"

## 编辑器配置

### VSCode 推荐插件

- Vue Language Features (Volar)
- TypeScript Vue Plugin (Volar)
- ESLint
- Prettier - Code formatter
- SCSS IntelliSense
- Auto Import
- Path Intellisense

### 编辑器设置

```json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "volar.completion.preferredAttrNameCase": "kebab"
}
``` 