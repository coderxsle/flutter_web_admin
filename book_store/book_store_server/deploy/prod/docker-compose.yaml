version: '3.8'

services:
  # 服务器服务
  server:
    image: ${IMAGE_NAME}  # 使用我们上传的本地镜像
    ports:
      - "8080:8080"
    container_name: book_store_server
    restart: always
    volumes:
      - ${DEPLOY_PATH}/logs:/app/logs
    networks:
      - book_store_network

    environment:
      - runmode=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - postgres
      - redis
    # 添加 labels 方便在 Portainer 中识别
    labels:
      - "com.docker.compose.project=${IMAGE_NAME}"
      - "com.docker.compose.service=app"
      - "maintainer=your-team"
      - "version=${VERSION}"
      - "traefik.enable=true"
      - "traefik.http.routers.${IMAGE_NAME}.rule=Host(`${DOMAIN}`)"
      # Portainer 标签
      - "portainer.group=production"
      - "portainer.notes=生产环境应用"
      - "portainer.template.name=${IMAGE_NAME}"
      # 添加健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16.3  # 使用 alpine 版本，更小更快
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - book_store_data:/var/lib/postgresql/data
    restart: always
    networks:
      - book_store_network

  # Redis 服务
  redis:
    image: redis:6.2.6
    ports:
      - '6379:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: always
    networks:
      - book_store_network

  # Nginx 服务
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"  # 如果需要 HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl  # 如果需要 HTTPS
    depends_on:
      - server
    restart: always
    networks:
      - book_store_network

volumes:
  book_store_data:

networks:
  book_store_network:
    driver: bridge

    